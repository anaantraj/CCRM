package edu.ccrm.cli;

import edu.ccrm.config.AppConfig;
import edu.ccrm.domain.*;
import edu.ccrm.exception.CourseNotFoundException;
import edu.ccrm.exception.DuplicateEnrollmentException;
import edu.ccrm.exception.MaxCreditLimitExceededException;
import edu.ccrm.exception.StudentNotFoundException;
import edu.ccrm.io.BackupService;
import edu.ccrm.io.ImportExportService;
import edu.ccrm.service.*;
import edu.ccrm.util.RecursiveUtil;

import java.io.IOException;
import java.nio.file.Path;
import java.util.List;
import java.util.Scanner;
import java.util.function.Predicate;

/**
 * Manages the command-line interface (CLI) for the CCRM application.
 * It handles user input, displays menus, and orchestrates calls to the service layer.
 */
public class CliManager {

    private final Scanner scanner = new Scanner(System.in);
    private final StudentService studentService = new StudentService();
    private final CourseService courseService = new CourseService();
    private final EnrollmentService enrollmentService = new EnrollmentService();
    private final TranscriptService transcriptService = new TranscriptService();
    private final ImportExportService importExportService = new ImportExportService();
    private final BackupService backupService = new BackupService();

    /**
     * The main application loop. Displays the main menu and processes user input.
     */
    public void run() {
        // Topic: Loops (while)
        while (true) {
            printMainMenu();
            int choice = getUserChoice();
            // Topic: Decision Structures (enhanced switch)
            switch (choice) {
                case 1 -> handleStudentMenu();
                case 2 -> handleCourseMenu();
                case 3 -> handleEnrollmentMenu();
                case 4 -> handleDataUtilityMenu();
                case 5 -> handleReportsMenu();
                case 9 -> handleAnonymousClassDemo(); // Hidden demo option
                case 0 -> {
                    System.out.println("Exiting application. Goodbye!");
                    printPlatformSummary();
                    return; // Exit the run() method and terminate
                }
                default -> System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    // Menu Handlers
    private void handleStudentMenu() {
        // Implementation for student management
        while(true) {
            System.out.println("\n--- Manage Students ---");
            System.out.println("1. Add New Student");
            System.out.println("2. List All Students");
            System.out.println("3. Find Student by Registration Number");
            System.out.println("0. Back to Main Menu");
            System.out.print("Enter choice: ");
            int choice = getUserChoice();
            switch (choice) {
                case 1 -> addStudent();
                case 2 -> listAllStudents();
                case 3 -> findStudentByRegNo();
                case 0 -> { return; } // Topic: Jump Control (return from method)
                default -> System.out.println("Invalid choice.");
            }
        }
    }

    private void handleCourseMenu() {
        while(true) {
            System.out.println("\n--- Manage Courses ---");
            System.out.println("1. Add New Course");
            System.out.println("2. List All Courses");
            System.out.println("3. Search Courses by Department");
            System.out.println("0. Back to Main Menu");
            System.out.print("Enter choice: ");
            int choice = getUserChoice();
            switch (choice) {
                case 1 -> addCourse();
                case 2 -> listAllCourses();
                case 3 -> searchCoursesByDept();
                case 0 -> { return; }
                default -> System.out.println("Invalid choice.");
            }
        }
    }

    private void handleEnrollmentMenu() {
        while(true) {
            System.out.println("\n--- Manage Enrollments & Grades ---");
            System.out.println("1. Enroll Student in Course");
            System.out.println("2. Record Grade for Student");
            System.out.println("3. View Student Transcript");
            System.out.println("0. Back to Main Menu");
            System.out.print("Enter choice: ");
            int choice = getUserChoice();
            switch (choice) {
                case 1 -> enrollStudent();
                case 2 -> recordGrade();
                case 3 -> viewTranscript();
                case 0 -> { return; }
                default -> System.out.println("Invalid choice.");
            }
        }
    }

     private void handleDataUtilityMenu() {
        while (true) {
            System.out.println("\n--- Data Utilities ---");
            System.out.println("1. Import Students from CSV");
            System.out.println("2. Import Courses from CSV");
            System.out.println("3. Export All Data to CSV");
            System.out.println("4. Backup Data");
            System.out.println("5. Show Backup Size (Recursive)");
            System.out.println("0. Back to Main Menu");
            System.out.print("Enter choice: ");
            int choice = getUserChoice();
            switch (choice) {
                case 1 -> importStudents();
                case 2 -> importCourses();
                case 3 -> exportData();
                case 4 -> backupData();
                case 5 -> showBackupSize();
                case 0 -> { return; }
                default -> System.out.println("Invalid choice.");
            }
        }
    }

    private void handleReportsMenu() {
         System.out.println("\n--- Reports ---");
         System.out.println("1. Calculate GPA Distribution");
         System.out.print("Enter choice: ");
         int choice = getUserChoice();
         if(choice == 1) {
             enrollmentService.printGpaDistribution();
         } else {
             System.out.println("Invalid choice.");
         }
    }

    // Feature Implementations

    private void addStudent() {
        try {
            System.out.print("Enter Registration Number (e.g., S101): ");
            String regNo = scanner.nextLine();
            System.out.print("Enter Full Name: ");
            String fullName = scanner.nextLine();
            System.out.print("Enter Email: ");
            String email = scanner.nextLine();
            studentService.addStudent(regNo, fullName, email);
            System.out.println("Student added successfully!");
        } catch (IllegalArgumentException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private void listAllStudents() {
        System.out.println("\n--- All Students ---");
        List<Student> students = studentService.getAllStudents();
        if (students.isEmpty()) {
            System.out.println("No students found.");
        } else {
            // Topic: Loops (enhanced for)
            for (Student student : students) {
                System.out.println(student);
            }
        }
    }

    private void findStudentByRegNo() {
        System.out.print("Enter Registration Number: ");
        String regNo = scanner.nextLine();
        try {
            Student student = studentService.findStudentByRegNo(regNo);
            System.out.println("Student Found: " + student.getProfileDetails());
        } catch (StudentNotFoundException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }


    private void addCourse() {
        try {
            System.out.print("Enter Course Code (e.g., CS101): ");
            String code = scanner.nextLine();
            System.out.print("Enter Course Title: ");
            String title = scanner.nextLine();
            System.out.print("Enter Credits: ");
            int credits = Integer.parseInt(scanner.nextLine());
            System.out.print("Enter Department (e.g., COMPUTER_SCIENCE): ");
            String department = scanner.nextLine().toUpperCase();
            System.out.print("Enter Semester (e.g., FALL): ");
            String semester = scanner.nextLine().toUpperCase();

            // Topic: Design Pattern (Builder)
            Course course = new Course.Builder(new CourseCode(code), title)
                .credits(credits)
                .department(Department.valueOf(department))
                .semester(Semester.valueOf(semester))
                .build();
            courseService.addCourse(course);
            System.out.println("Course added successfully!");
        } catch (Exception e) {
            System.out.println("Error creating course: " + e.getMessage());
        }
    }

    private void listAllCourses() {
        System.out.println("\n--- All Courses ---");
        List<Course> courses = courseService.getAllCourses();
        if (courses.isEmpty()) {
            System.out.println("No courses found.");
        } else {
            courses.forEach(System.out::println);
        }
    }

    private void searchCoursesByDept() {
        System.out.print("Enter Department to search for (e.g., COMPUTER_SCIENCE): ");
        String deptStr = scanner.nextLine().toUpperCase();
        try {
            Department dept = Department.valueOf(deptStr);
            // Topic: Lambdas & Functional Interfaces
            Predicate<Course> byDept = course -> course.getDepartment().equals(dept);
            List<Course> results = courseService.searchCourses(byDept);
            System.out.println("\n--- Search Results ---");
            if (results.isEmpty()) {
                System.out.println("No courses found for department: " + dept);
            } else {
                results.forEach(System.out::println);
            }
        } catch (IllegalArgumentException e) {
            System.out.println("Error: Invalid department name.");
        }
    }

    private void enrollStudent() {
        System.out.print("Enter Student Registration Number: ");
        String regNo = scanner.nextLine();
        System.out.print("Enter Course Code: ");
        String courseCode = scanner.nextLine();
        // Topic: Exception Handling (try-catch)
        try {
            enrollmentService.enrollStudent(regNo, new CourseCode(courseCode));
            System.out.println("Enrollment successful!");
        } catch (StudentNotFoundException | CourseNotFoundException | DuplicateEnrollmentException | MaxCreditLimitExceededException e) {
            System.out.println("Enrollment failed: " + e.getMessage());
        }
    }

    private void recordGrade() {
        System.out.print("Enter Student Registration Number: ");
        String regNo = scanner.nextLine();
        System.out.print("Enter Course Code: ");
        String courseCode = scanner.nextLine();
        System.out.print("Enter Grade (S, A, B, C, D, E, F): ");
        String gradeStr = scanner.nextLine().toUpperCase();
        try {
            Grade grade = Grade.valueOf(gradeStr);
            enrollmentService.recordMark(regNo, new CourseCode(courseCode), grade);
            System.out.println("Grade recorded successfully!");
        } catch (StudentNotFoundException | CourseNotFoundException e) {
            System.out.println("Error: " + e.getMessage());
        } catch (IllegalArgumentException e) {
            System.out.println("Error: Invalid grade entered.");
        }
    }

    private void viewTranscript() {
        System.out.print("Enter Student Registration Number: ");
        String regNo = scanner.nextLine();
        try {
            // Topic: Polymorphism in action
            transcriptService.printTranscript(regNo);
        } catch (StudentNotFoundException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }


    private void importStudents() {
        try {
            int count = importExportService.importStudents();
            System.out.println(count + " students imported successfully.");
        } catch (IOException e) {
            System.out.println("Error importing students: " + e.getMessage());
        }
    }

    private void importCourses() {
        try {
            int count = importExportService.importCourses();
            System.out.println(count + " courses imported successfully.");
        } catch (IOException e) {
            System.out.println("Error importing courses: " + e.getMessage());
        }
    }

    private void exportData() {
        try {
            importExportService.exportAllData();
            System.out.println("Data exported successfully to the '" + AppConfig.getInstance().getDataDirectory() + "' directory.");
        } catch (IOException e) {
            System.out.println("Error exporting data: " + e.getMessage());
        }
    }

    private void backupData() {
        try {
            Path backupPath = backupService.performBackup();
            System.out.println("Backup created successfully at: " + backupPath);
        } catch (IOException e) {
            System.out.println("Error creating backup: " + e.getMessage());
        }
    }

    private void showBackupSize() {
        try {
            long size = RecursiveUtil.calculateDirectorySize(Path.of(AppConfig.getInstance().getBackupDirectory()));
            System.out.printf("Total size of all backups: %.2f KB%n", size / 1024.0);
        } catch (IOException e) {
            System.out.println("Could not calculate backup size: " + e.getMessage());
        }
    }

    // Topic: Anonymous Inner Classes
    private void handleAnonymousClassDemo() {
        // This is a simple runnable task defined with an anonymous inner class
        Runnable task = new Runnable() {
            @Override
            public void run() {
                // Topic: Nested Classes (Inner Class can access outer class members)
                System.out.println("This message is from an anonymous inner class.");
                System.out.println("It can access outer class members, like the scanner: " + scanner.getClass().getSimpleName());
            }
        };
        task.run();
        System.out.println("Press Enter to continue...");
        scanner.nextLine();
    }


    // Helper Methods
    private int getUserChoice() {
        try {
            return Integer.parseInt(scanner.nextLine());
        } catch (NumberFormatException e) {
            return -1; // Return an invalid choice
        }
    }

    private void printMainMenu() {
        System.out.println("\n=====================================================");
        System.out.println(" Campus Course & Records Manager (CCRM)");
        System.out.println("=====================================================");
        System.out.println("1. Manage Students");
        System.out.println("2. Manage Courses");
        System.out.println("3. Manage Enrollments & Grades");
        System.out.println("4. Data Utilities");
        System.out.println("5. Reports");
        System.out.println("0. Exit");
        System.out.println("=====================================================");
        System.out.print("Enter your choice: ");
    }

    private void printPlatformSummary() {
        System.out.println("\n--- Java Platform Summary ---");
        System.out.println("Java SE (Standard Edition): For desktop/server apps. The core platform. (This project)");
        System.out.println("Java ME (Micro Edition): For resource-constrained devices like old mobiles.");
        System.out.println("Java EE (Enterprise Edition): Extends SE for large-scale enterprise web applications.");
        System.out.println("-----------------------------");
    }
}
